enum Color : byte { Red = 0, Green, Blue }

struct Point3b {
  xyz:[byte:3];
}
struct Point3s {
  xyz:[short:3];
}
struct Point3i {
  xyz:[int:3];
}
struct Point3l {
  pad1:ubyte; // forces additional padding for alignment
  xyz:[long:3];
}
struct Point3f {
  xyz:[float:3];
}
struct Point3d {
  xyz:[double:3];
}
struct Point3e {
  xyz:[Color:3];
}

struct Mat3x3b {
  cols:[Point3b:3];
}
struct Mat3x3s {
  cols:[Point3s:3];
}
struct Mat3x3i {
  cols:[Point3i:3];
}
struct Mat3x3l {
  pad1:ubyte; // forces additional padding for alignment
  cols:[Point3l:3];
}
struct Mat3x3f {
  cols:[Point3f:3];
}
struct Mat3x3d {
  cols:[Point3d:3];
}
struct Mat3x3e {
  cols:[Point3e:3];
}

table ArraysTable {
  point3b_vec:[Point3b];
  point3s_vec:[Point3s];
  pad1:ubyte; // forces additional padding for alignment
  point3i_vec:[Point3i];
  point3l_vec:[Point3l];
  point3f_vec:[Point3f];
  point3d_vec:[Point3d];
  point3e_vec:[Point3e];
  mat3x3b:Mat3x3b;
  mat3x3s:Mat3x3s;
  pad2:ubyte; // forces additional padding for alignment
  mat3x3i:Mat3x3i;
  mat3x3l:Mat3x3l;
  mat3x3f:Mat3x3f;
  mat3x3d:Mat3x3d;
  mat3x3e:Mat3x3e;
}
root_type ArraysTable;
