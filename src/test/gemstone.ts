// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Gemstone {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Gemstone {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGemstone(bb:flatbuffers.ByteBuffer, obj?:Gemstone):Gemstone {
  return (obj || new Gemstone()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGemstone(bb:flatbuffers.ByteBuffer, obj?:Gemstone):Gemstone {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Gemstone()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

shine():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startGemstone(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addShine(builder:flatbuffers.Builder, shine:number) {
  builder.addFieldFloat64(0, shine, 0.0);
}

static endGemstone(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGemstone(builder:flatbuffers.Builder, shine:number):flatbuffers.Offset {
  Gemstone.startGemstone(builder);
  Gemstone.addShine(builder, shine);
  return Gemstone.endGemstone(builder);
}
}
