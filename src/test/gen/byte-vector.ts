// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { NestedStruct, NestedStructT } from './nested-struct';


export class ByteVector implements flatbuffers.IUnpackableObject<ByteVectorT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ByteVector {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsByteVector(bb:flatbuffers.ByteBuffer, obj?:ByteVector):ByteVector {
  return (obj || new ByteVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsByteVector(bb:flatbuffers.ByteBuffer, obj?:ByteVector):ByteVector {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ByteVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

nestedStruct(obj?:NestedStruct):NestedStruct|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new NestedStruct()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startByteVector(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addNestedStruct(builder:flatbuffers.Builder, nestedStructOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, nestedStructOffset, 0);
}

static endByteVector(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishByteVectorBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedByteVectorBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): ByteVectorT {
  return new ByteVectorT(
    this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength()),
    (this.nestedStruct() !== null ? this.nestedStruct()!.unpack() : null)
  );
}


unpackTo(_o: ByteVectorT): void {
  _o.data = this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength());
  _o.nestedStruct = (this.nestedStruct() !== null ? this.nestedStruct()!.unpack() : null);
}
}

export class ByteVectorT implements flatbuffers.IGeneratedObject {
constructor(
  public data: (number)[] = [],
  public nestedStruct: NestedStructT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const data = ByteVector.createDataVector(builder, this.data);

  ByteVector.startByteVector(builder);
  ByteVector.addData(builder, data);
  ByteVector.addNestedStruct(builder, (this.nestedStruct !== null ? this.nestedStruct!.pack(builder) : 0));

  return ByteVector.endByteVector(builder);
}
}
