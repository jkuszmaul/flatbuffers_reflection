// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { StructA, StructAT } from './struct-a';
import { StructB, StructBT } from './struct-b';


export enum Kind {
  NONE = 0,
  StructA = 1,
  StructB = 2
}

export function unionToKind(
  type: Kind,
  accessor: (obj:StructA|StructB) => StructA|StructB|null
): StructA|StructB|null {
  switch(Kind[type]) {
    case 'NONE': return null; 
    case 'StructA': return accessor(new StructA())! as StructA;
    case 'StructB': return accessor(new StructB())! as StructB;
    default: return null;
  }
}

export function unionListToKind(
  type: Kind, 
  accessor: (index: number, obj:StructA|StructB) => StructA|StructB|null, 
  index: number
): StructA|StructB|null {
  switch(Kind[type]) {
    case 'NONE': return null; 
    case 'StructA': return accessor(index, new StructA())! as StructA;
    case 'StructB': return accessor(index, new StructB())! as StructB;
    default: return null;
  }
}
