// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Point3l, Point3lT } from './point3l';


export class Mat3x3l implements flatbuffers.IUnpackableObject<Mat3x3lT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Mat3x3l {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

cols(index: number, obj?:Point3l):Point3l|null {
    return (obj || new Point3l()).__init(this.bb_pos + 0 + index * 24, this.bb!);
}

static sizeOf():number {
  return 72;
}

static createMat3x3l(builder:flatbuffers.Builder, cols: (any|Point3lT)[]|null):flatbuffers.Offset {
  builder.prep(8, 72);

  for (let i = 2; i >= 0; --i) {
    const item = cols?.[i];

    if (item instanceof Point3lT) {
      item.pack(builder);
      continue;
    }

    Point3l.createPoint3l(builder,
    item?.xyz
    );
  }

  return builder.offset();
}


unpack(): Mat3x3lT {
  return new Mat3x3lT(
    this.bb!.createObjList<Point3l, Point3lT>(this.cols.bind(this), 3)
  );
}


unpackTo(_o: Mat3x3lT): void {
  _o.cols = this.bb!.createObjList<Point3l, Point3lT>(this.cols.bind(this), 3);
}
}

export class Mat3x3lT implements flatbuffers.IGeneratedObject {
constructor(
  public cols: (Point3lT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Mat3x3l.createMat3x3l(builder,
    this.cols
  );
}
}
