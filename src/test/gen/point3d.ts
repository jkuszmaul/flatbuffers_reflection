// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Point3d implements flatbuffers.IUnpackableObject<Point3dT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Point3d {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

xyz(index: number):number|null {
    return this.bb!.readFloat64(this.bb_pos + 0 + index * 8);
}

static sizeOf():number {
  return 24;
}

static createPoint3d(builder:flatbuffers.Builder, xyz: number[]|null):flatbuffers.Offset {
  builder.prep(8, 24);

  for (let i = 2; i >= 0; --i) {
    builder.writeFloat64((xyz?.[i] ?? 0));

  }

  return builder.offset();
}


unpack(): Point3dT {
  return new Point3dT(
    this.bb!.createScalarList<number>(this.xyz.bind(this), 3)
  );
}


unpackTo(_o: Point3dT): void {
  _o.xyz = this.bb!.createScalarList<number>(this.xyz.bind(this), 3);
}
}

export class Point3dT implements flatbuffers.IGeneratedObject {
constructor(
  public xyz: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Point3d.createPoint3d(builder,
    this.xyz
  );
}
}
