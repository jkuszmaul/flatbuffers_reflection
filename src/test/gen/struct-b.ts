// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class StructB implements flatbuffers.IUnpackableObject<StructBT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StructB {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

count():number {
  return this.bb!.readUint8(this.bb_pos);
}

static sizeOf():number {
  return 1;
}

static createStructB(builder:flatbuffers.Builder, count: number):flatbuffers.Offset {
  builder.prep(1, 1);
  builder.writeInt8(count);
  return builder.offset();
}


unpack(): StructBT {
  return new StructBT(
    this.count()
  );
}


unpackTo(_o: StructBT): void {
  _o.count = this.count();
}
}

export class StructBT implements flatbuffers.IGeneratedObject {
constructor(
  public count: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return StructB.createStructB(builder,
    this.count
  );
}
}
