// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Kind, unionToKind, unionListToKind } from './kind';
import { StructA, StructAT } from './struct-a';
import { StructB, StructBT } from './struct-b';


export class UnionStruct implements flatbuffers.IUnpackableObject<UnionStructT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UnionStruct {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUnionStruct(bb:flatbuffers.ByteBuffer, obj?:UnionStruct):UnionStruct {
  return (obj || new UnionStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUnionStruct(bb:flatbuffers.ByteBuffer, obj?:UnionStruct):UnionStruct {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UnionStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

kindType():Kind {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Kind.NONE;
}

kind<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startUnionStruct(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKindType(builder:flatbuffers.Builder, kindType:Kind) {
  builder.addFieldInt8(0, kindType, Kind.NONE);
}

static addKind(builder:flatbuffers.Builder, kindOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, kindOffset, 0);
}

static endUnionStruct(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishUnionStructBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedUnionStructBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createUnionStruct(builder:flatbuffers.Builder, kindType:Kind, kindOffset:flatbuffers.Offset):flatbuffers.Offset {
  UnionStruct.startUnionStruct(builder);
  UnionStruct.addKindType(builder, kindType);
  UnionStruct.addKind(builder, kindOffset);
  return UnionStruct.endUnionStruct(builder);
}

unpack(): UnionStructT {
  return new UnionStructT(
    this.kindType(),
    (() => {
      const temp = unionToKind(this.kindType(), this.kind.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: UnionStructT): void {
  _o.kindType = this.kindType();
  _o.kind = (() => {
      const temp = unionToKind(this.kindType(), this.kind.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class UnionStructT implements flatbuffers.IGeneratedObject {
constructor(
  public kindType: Kind = Kind.NONE,
  public kind: StructAT|StructBT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const kind = builder.createObjectOffset(this.kind);

  return UnionStruct.createUnionStruct(builder,
    this.kindType,
    kind
  );
}
}
