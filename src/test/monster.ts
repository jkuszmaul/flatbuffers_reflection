// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Equipment } from "./equipment";

export class Monster {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Monster {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsMonster(bb: flatbuffers.ByteBuffer, obj?: Monster): Monster {
    return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsMonster(bb: flatbuffers.ByteBuffer, obj?: Monster): Monster {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  equippedType(): Equipment {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint8(this.bb_pos + offset) : Equipment.NONE;
  }

  equipped(obj: any): any | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
  }

  static startMonster(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addEquippedType(builder: flatbuffers.Builder, equippedType: Equipment) {
    builder.addFieldInt8(0, equippedType, Equipment.NONE);
  }

  static addEquipped(builder: flatbuffers.Builder, equippedOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, equippedOffset, 0);
  }

  static endMonster(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishMonsterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset);
  }

  static finishSizePrefixedMonsterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset, undefined, true);
  }

  static createMonster(
    builder: flatbuffers.Builder,
    equippedType: Equipment,
    equippedOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    Monster.startMonster(builder);
    Monster.addEquippedType(builder, equippedType);
    Monster.addEquipped(builder, equippedOffset);
    return Monster.endMonster(builder);
  }
}
