// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Shield implements flatbuffers.IUnpackableObject<ShieldT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Shield {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsShield(bb:flatbuffers.ByteBuffer, obj?:Shield):Shield {
  return (obj || new Shield()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsShield(bb:flatbuffers.ByteBuffer, obj?:Shield):Shield {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Shield()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

protection():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startShield(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addProtection(builder:flatbuffers.Builder, protection:number) {
  builder.addFieldFloat32(0, protection, 0.0);
}

static endShield(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createShield(builder:flatbuffers.Builder, protection:number):flatbuffers.Offset {
  Shield.startShield(builder);
  Shield.addProtection(builder, protection);
  return Shield.endShield(builder);
}

unpack(): ShieldT {
  return new ShieldT(
    this.protection()
  );
}


unpackTo(_o: ShieldT): void {
  _o.protection = this.protection();
}
}

export class ShieldT implements flatbuffers.IGeneratedObject {
constructor(
  public protection: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Shield.createShield(builder,
    this.protection
  );
}
}
